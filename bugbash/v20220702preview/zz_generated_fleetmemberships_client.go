//go:build go1.18
// +build go1.18

// Code generated by Microsoft (R) AutoRest Code Generator (autorest: 3.9.1, generator: @autorest/go@4.0.0-preview.43)
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// DO NOT EDIT.

package v20220702preview

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	armruntime "github.com/Azure/azure-sdk-for-go/sdk/azcore/arm/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/cloud"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strings"
)

// FleetMembershipsClient contains the methods for the FleetMemberships group.
// Don't use this type directly, use NewFleetMembershipsClient() instead.
type FleetMembershipsClient struct {
	host           string
	subscriptionID string
	pl             runtime.Pipeline
}

// NewFleetMembershipsClient creates a new instance of FleetMembershipsClient with the specified values.
// subscriptionID - The ID of the target subscription.
// credential - used to authorize requests. Usually a credential from azidentity.
// options - pass nil to accept the default values.
func NewFleetMembershipsClient(subscriptionID string, credential azcore.TokenCredential, options *arm.ClientOptions) (*FleetMembershipsClient, error) {
	if options == nil {
		options = &arm.ClientOptions{}
	}
	ep := cloud.AzurePublic.Services[cloud.ResourceManager].Endpoint
	if c, ok := options.Cloud.Services[cloud.ResourceManager]; ok {
		ep = c.Endpoint
	}
	pl, err := armruntime.NewPipeline(moduleName, moduleVersion, credential, runtime.PipelineOptions{}, options)
	if err != nil {
		return nil, err
	}
	client := &FleetMembershipsClient{
		subscriptionID: subscriptionID,
		host:           ep,
		pl:             pl,
	}
	return client, nil
}

// BeginCreateOrUpdate - Creates or updates a fleet membership extension resource.
// If the operation fails it returns an *azcore.ResponseError type.
// Generated from API version 2022-06-02-preview
// resourceGroupName - The name of the resource group. The name is case insensitive.
// clusterResourceProviderName - The Kubernetes cluster resource provider - i.e. Microsoft.ContainerService.
// clusterResourceType - The Kubernetes cluster resource type - i.e. managedClusters
// clusterName - The name of the Kubernetes cluster.
// fleetMembershipName - The name of the fleet membership resource.
// parameters - The fleet membership extension to create or update.
// options - FleetMembershipsClientBeginCreateOrUpdateOptions contains the optional parameters for the FleetMembershipsClient.BeginCreateOrUpdate
// method.
func (client *FleetMembershipsClient) BeginCreateOrUpdate(ctx context.Context, resourceGroupName string, clusterResourceProviderName MemberClusterResourceProvider, clusterResourceType MemberClusterResourceType, clusterName string, fleetMembershipName string, parameters FleetMembershipExtension, options *FleetMembershipsClientBeginCreateOrUpdateOptions) (*runtime.Poller[FleetMembershipsClientCreateOrUpdateResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.createOrUpdate(ctx, resourceGroupName, clusterResourceProviderName, clusterResourceType, clusterName, fleetMembershipName, parameters, options)
		if err != nil {
			return nil, err
		}
		return runtime.NewPoller[FleetMembershipsClientCreateOrUpdateResponse](resp, client.pl, nil)
	} else {
		return runtime.NewPollerFromResumeToken[FleetMembershipsClientCreateOrUpdateResponse](options.ResumeToken, client.pl, nil)
	}
}

// CreateOrUpdate - Creates or updates a fleet membership extension resource.
// If the operation fails it returns an *azcore.ResponseError type.
// Generated from API version 2022-06-02-preview
func (client *FleetMembershipsClient) createOrUpdate(ctx context.Context, resourceGroupName string, clusterResourceProviderName MemberClusterResourceProvider, clusterResourceType MemberClusterResourceType, clusterName string, fleetMembershipName string, parameters FleetMembershipExtension, options *FleetMembershipsClientBeginCreateOrUpdateOptions) (*http.Response, error) {
	req, err := client.createOrUpdateCreateRequest(ctx, resourceGroupName, clusterResourceProviderName, clusterResourceType, clusterName, fleetMembershipName, parameters, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK, http.StatusCreated) {
		return nil, runtime.NewResponseError(resp)
	}
	return resp, nil
}

// createOrUpdateCreateRequest creates the CreateOrUpdate request.
func (client *FleetMembershipsClient) createOrUpdateCreateRequest(ctx context.Context, resourceGroupName string, clusterResourceProviderName MemberClusterResourceProvider, clusterResourceType MemberClusterResourceType, clusterName string, fleetMembershipName string, parameters FleetMembershipExtension, options *FleetMembershipsClientBeginCreateOrUpdateOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{clusterResourceProviderName}/{clusterResourceType}/{clusterName}/providers/Microsoft.ContainerService/fleetMemberships/{fleetMembershipName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if clusterResourceProviderName == "" {
		return nil, errors.New("parameter clusterResourceProviderName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{clusterResourceProviderName}", url.PathEscape(string(clusterResourceProviderName)))
	if clusterResourceType == "" {
		return nil, errors.New("parameter clusterResourceType cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{clusterResourceType}", url.PathEscape(string(clusterResourceType)))
	if clusterName == "" {
		return nil, errors.New("parameter clusterName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{clusterName}", url.PathEscape(clusterName))
	if fleetMembershipName == "" {
		return nil, errors.New("parameter fleetMembershipName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{fleetMembershipName}", url.PathEscape(fleetMembershipName))
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(client.host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2022-06-02-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	if options != nil && options.IfMatch != nil {
		req.Raw().Header["If-Match"] = []string{*options.IfMatch}
	}
	if options != nil && options.IfNoneMatch != nil {
		req.Raw().Header["If-None-Match"] = []string{*options.IfNoneMatch}
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, runtime.MarshalAsJSON(req, parameters)
}

// BeginDelete - Deletes a fleet membership resource. This results in the member cluster leaving the fleet.
// If the operation fails it returns an *azcore.ResponseError type.
// Generated from API version 2022-06-02-preview
// resourceGroupName - The name of the resource group. The name is case insensitive.
// clusterResourceProviderName - The Kubernetes cluster resource provider - i.e. Microsoft.ContainerService.
// clusterResourceType - The Kubernetes cluster resource type - i.e. managedClusters
// clusterName - The name of the Kubernetes cluster.
// fleetMembershipName - The name of the fleet membership resource.
// options - FleetMembershipsClientBeginDeleteOptions contains the optional parameters for the FleetMembershipsClient.BeginDelete
// method.
func (client *FleetMembershipsClient) BeginDelete(ctx context.Context, resourceGroupName string, clusterResourceProviderName MemberClusterResourceProvider, clusterResourceType MemberClusterResourceType, clusterName string, fleetMembershipName string, options *FleetMembershipsClientBeginDeleteOptions) (*runtime.Poller[FleetMembershipsClientDeleteResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.deleteOperation(ctx, resourceGroupName, clusterResourceProviderName, clusterResourceType, clusterName, fleetMembershipName, options)
		if err != nil {
			return nil, err
		}
		return runtime.NewPoller[FleetMembershipsClientDeleteResponse](resp, client.pl, nil)
	} else {
		return runtime.NewPollerFromResumeToken[FleetMembershipsClientDeleteResponse](options.ResumeToken, client.pl, nil)
	}
}

// Delete - Deletes a fleet membership resource. This results in the member cluster leaving the fleet.
// If the operation fails it returns an *azcore.ResponseError type.
// Generated from API version 2022-06-02-preview
func (client *FleetMembershipsClient) deleteOperation(ctx context.Context, resourceGroupName string, clusterResourceProviderName MemberClusterResourceProvider, clusterResourceType MemberClusterResourceType, clusterName string, fleetMembershipName string, options *FleetMembershipsClientBeginDeleteOptions) (*http.Response, error) {
	req, err := client.deleteCreateRequest(ctx, resourceGroupName, clusterResourceProviderName, clusterResourceType, clusterName, fleetMembershipName, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(resp, http.StatusAccepted, http.StatusNoContent) {
		return nil, runtime.NewResponseError(resp)
	}
	return resp, nil
}

// deleteCreateRequest creates the Delete request.
func (client *FleetMembershipsClient) deleteCreateRequest(ctx context.Context, resourceGroupName string, clusterResourceProviderName MemberClusterResourceProvider, clusterResourceType MemberClusterResourceType, clusterName string, fleetMembershipName string, options *FleetMembershipsClientBeginDeleteOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{clusterResourceProviderName}/{clusterResourceType}/{clusterName}/providers/Microsoft.ContainerService/fleetMemberships/{fleetMembershipName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if clusterResourceProviderName == "" {
		return nil, errors.New("parameter clusterResourceProviderName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{clusterResourceProviderName}", url.PathEscape(string(clusterResourceProviderName)))
	if clusterResourceType == "" {
		return nil, errors.New("parameter clusterResourceType cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{clusterResourceType}", url.PathEscape(string(clusterResourceType)))
	if clusterName == "" {
		return nil, errors.New("parameter clusterName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{clusterName}", url.PathEscape(clusterName))
	if fleetMembershipName == "" {
		return nil, errors.New("parameter fleetMembershipName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{fleetMembershipName}", url.PathEscape(fleetMembershipName))
	req, err := runtime.NewRequest(ctx, http.MethodDelete, runtime.JoinPaths(client.host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2022-06-02-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	if options != nil && options.IfMatch != nil {
		req.Raw().Header["If-Match"] = []string{*options.IfMatch}
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// Get - Gets a fleet membership extension resource.
// If the operation fails it returns an *azcore.ResponseError type.
// Generated from API version 2022-06-02-preview
// resourceGroupName - The name of the resource group. The name is case insensitive.
// clusterResourceProviderName - The Kubernetes cluster resource provider - i.e. Microsoft.ContainerService.
// clusterResourceType - The Kubernetes cluster resource type - i.e. managedClusters
// clusterName - The name of the Kubernetes cluster.
// fleetMembershipName - The name of the fleet membership resource.
// options - FleetMembershipsClientGetOptions contains the optional parameters for the FleetMembershipsClient.Get method.
func (client *FleetMembershipsClient) Get(ctx context.Context, resourceGroupName string, clusterResourceProviderName MemberClusterResourceProvider, clusterResourceType MemberClusterResourceType, clusterName string, fleetMembershipName string, options *FleetMembershipsClientGetOptions) (FleetMembershipsClientGetResponse, error) {
	req, err := client.getCreateRequest(ctx, resourceGroupName, clusterResourceProviderName, clusterResourceType, clusterName, fleetMembershipName, options)
	if err != nil {
		return FleetMembershipsClientGetResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return FleetMembershipsClientGetResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return FleetMembershipsClientGetResponse{}, runtime.NewResponseError(resp)
	}
	return client.getHandleResponse(resp)
}

// getCreateRequest creates the Get request.
func (client *FleetMembershipsClient) getCreateRequest(ctx context.Context, resourceGroupName string, clusterResourceProviderName MemberClusterResourceProvider, clusterResourceType MemberClusterResourceType, clusterName string, fleetMembershipName string, options *FleetMembershipsClientGetOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{clusterResourceProviderName}/{clusterResourceType}/{clusterName}/providers/Microsoft.ContainerService/fleetMemberships/{fleetMembershipName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if clusterResourceProviderName == "" {
		return nil, errors.New("parameter clusterResourceProviderName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{clusterResourceProviderName}", url.PathEscape(string(clusterResourceProviderName)))
	if clusterResourceType == "" {
		return nil, errors.New("parameter clusterResourceType cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{clusterResourceType}", url.PathEscape(string(clusterResourceType)))
	if clusterName == "" {
		return nil, errors.New("parameter clusterName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{clusterName}", url.PathEscape(clusterName))
	if fleetMembershipName == "" {
		return nil, errors.New("parameter fleetMembershipName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{fleetMembershipName}", url.PathEscape(fleetMembershipName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2022-06-02-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getHandleResponse handles the Get response.
func (client *FleetMembershipsClient) getHandleResponse(resp *http.Response) (FleetMembershipsClientGetResponse, error) {
	result := FleetMembershipsClientGetResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.FleetMembershipExtension); err != nil {
		return FleetMembershipsClientGetResponse{}, err
	}
	return result, nil
}
